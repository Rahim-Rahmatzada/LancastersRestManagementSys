@startuml

class Menu {
    + int menuID
    + String name
    + List<Dish> dishes
    + Date effectiveDate
}

class Dish {
    + int dishID
    + String name
    + List<Ingredient> ingredients
    + double price
}

class Ingredient {
    + int ingredientID
    + String name
    + double cost
}

class Sale {
    + int saleID
    + Date date
    + Map<Dish, Integer> dishQuantities
    + double totalCost
}

class Booking {
    + int bookingID
    + Date bookingDate
    + int tableNumber
    + String customerName
}

class Schedule {
    + int scheduleID
    + String staffName
    + Date startDate
    + Date endDate
    + String role
}

class Wine {
    + int wineID
    + String name
    + String type
    + int quantity
}

class Table {
    + int tableID
    + int numOfSeats
}

class MenuManager {
    + List<Menu> menus
    + void createMenu(Menu menu)
    + void updateMenu(Menu menu)
    + void archiveMenu(int menuId)
    + Menu calculateMenuCosts(Menu menu)
    + void setDishPrice(Dish dish, double price)
}

class SalesTracker {
    + List<Sale> sales
    + void recordSale(Sale sale)
    + List<Sale> getSalesPerformance(Date startDate, Date endDate)
}

class BookingManager {
    + List<Booking> bookings
    + void addBooking(Booking booking)
    + void updateBooking(Booking booking)
    + void cancelBooking(int bookingId)
    + List<Booking> getBookingsForDate(Date date)
    + void manageBooking(Booking booking)
    + void setDailyBookingLimit(Date date, int limit)
    + int getDailyBookingLimit(Date date)
    + void adjustBookingLimitForSpecialEvent(Date date, int newLimit)
    + Map<Date, List<Booking>> generateBookingReport(Date startDate, Date endDate)
}

class StaffScheduler {
    + List<Schedule> schedules
    + void scheduleStaff(Schedule schedule)
    + void updateSchedule(Schedule schedule)
    + void recordHoliday(int staffId, Date startDate, Date endDate)
    + List<Schedule> getStaffSchedules(Date startDate, Date endDate)
    + void recordAbsences(List<Schedule> absences)
    + Map<Staff, Double> getStaffPerformance(Staff staff, Date date)
}

class InventoryManager {
    + Map<Ingredient, Integer> stockLevels
    + void updateStockLevels(Map<Ingredient, Integer> stock)
    + Map<Ingredient, Integer> getLowStockItems()
    + void recordWaste(Ingredient item, int quantity)
    + Map<Ingredient, Integer> generateOrder(List<Ingredient> ingredientsNeeded)
    + void alertForDiscrepancies(Map<Ingredient, Integer> order, Map<Ingredient, Integer> receivedStock)
    + int getCurrentStock(Ingredient ingredient)
    + Map<Ingredient, Integer> getFutureStockOrders()
}

class WineCellarManager {
    + List<Wine> wines
    + void updateWineStock(Wine wine)
    + List<Wine> getWineStockLevels()
    + Wine getSuggestedWinePairing(Dish dish)
    + Map<Wine, Integer> reportWineUsage(Wine wine, Date date)
}

MenuManager "1" -- "*" SalesTracker : "Utilizes"
MenuManager "1" -- "*" BookingManager : "Informs"
SalesTracker "1" -- "*" BookingManager : "Correlates Sales & Bookings"
StaffScheduler "1" -- "*" BookingManager : "Schedules Impact Bookings"
InventoryManager "1" -- "*" MenuManager : "Supplies Ingredients For"
WineCellarManager "1" -- "*" MenuManager : "Pairs Wines With Menus"

@enduml
